{"version":3,"sources":["img/black-circle.svg","img/red-circle.svg","components/Boards.js","factories/GameBoardFactory.js","factories/ShipFactory.js","factories/PlayerFactory.js","App.js","index.js"],"names":["Boards","props","playerBoard","computerBoard","handleClick","event","handlePlayerTurn","target","textContent","className","board","map","row","cell","missedAttacks","includes","src","BlackCircle","alt","successfulAttacks","RedCircle","onClick","lodash","require","GameBoardFactory","occupiedCoords","height","range","length","code","String","fromCharCode","num","char","createBoard","placeShip","coords","ship","push","receiveAttack","coord","i","pair","index","findIndex","x","hit","allShipsSunk","counter","forEach","isSunk","ShipFactory","hull","Array","from","every","compartment","PlayerFactory","attacks","nextAttacks","humanAttack","Error","computerAttack","splice","mockBoard","Math","floor","random","y","attackCoord","calculateNextAttackRange","position","originalCoord","filter","undefined","cleanCoords","xandYindexes","coordsArray","err","console","log","message","getCoords","pos","locatedCoordIndexes","difference","App","useState","setPlayerBoard","setComputerBoard","player","setPlayer","computer","setComputer","userTurn","setUserTurn","roundCounter","setRoundCounter","playerCoords","computerCoords","initializeBoards","identifier","useEffect","alert","setUpNewGame","setTimeout","newComputer","Object","assign","newPlayerBoard","computerAttacks","currentAttack","computerTurn","newPlayer","newComputerBoard","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d819e67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/black-circle.17c07aa9.svg\";","export default __webpack_public_path__ + \"static/media/red-circle.a8866b39.svg\";","import React from 'react';\nimport BlackCircle from '../img/black-circle.svg';\nimport RedCircle from '../img/red-circle.svg';\n\nfunction Boards(props) {\n\n  const { playerBoard, computerBoard } = props;\n  \n  const handleClick = (event) => {\n    props.handlePlayerTurn(event.target.textContent)\n  }\n\n  return (\n    <div className=\"Boards\">\n      <h2 className=\"PlayerBoardHeader\">Player Board</h2>\n      <div className=\"PlayerBoard\">\n        {playerBoard.board.map((row) => (\n          row.map((cell) => {\n            if (playerBoard.missedAttacks.includes(cell)) {\n              return (\n                <div key={cell} className=\"PlayerCell\">\n                  <img \n                    className=\"MissIcon\" \n                    src={BlackCircle} \n                    alt=\"Missed Attack\"\n                  />\n                </div>\n              )\n            } else if (playerBoard.successfulAttacks.includes(cell)) {\n              return (\n                <div key={cell} className=\"PlayerCell\">\n                  <img \n                    className=\"HitIcon\" \n                    src={RedCircle} \n                    alt=\"Missed Attack\"\n                  />\n                </div>\n              )\n            } else {\n              return (\n                <div key={cell} className=\"PlayerCell\">\n                  {cell}\n                </div>\n              )\n            }\n          })\n        ))}\n      </div>\n      <h2 className=\"ComputerBoardHeader\">Computer Board</h2>\n      <div className=\"ComputerBoard\">\n        {computerBoard.board.map((row) => (\n          row.map((cell) => {\n            if (computerBoard.missedAttacks.includes(cell)) {\n              return (\n                <div key={cell} className=\"ComputerCell\">\n                  <img \n                    className=\"MissIcon\" \n                    src={BlackCircle} \n                    alt=\"Missed Attack\"\n                  />\n                </div>\n              )\n            } else if (computerBoard.successfulAttacks.includes(cell)) {\n              return (\n                <div key={cell} className=\"ComputerCell\">\n                  <img \n                    className=\"HitIcon\" \n                    src={RedCircle} \n                    alt=\"Missed Attack\"\n                  />\n                </div>\n              )\n            } else {\n              return (\n                <div key={cell} className=\"ComputerCell\" onClick={handleClick}>\n                  {cell}\n                </div>\n              )\n            }\n          })\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Boards;","var lodash = require('lodash')\n\nfunction GameBoardFactory() {\n\n  let occupiedCoords = [];\n  let missedAttacks = [];\n  let successfulAttacks = [];\n\n  const createBoard = () => {\n    const height = lodash.range(1, 11);\n    const length = lodash.range(65, 75).map((code) => String.fromCharCode(code));\n    const board = height.map((num) => {\n      return length.map((char) => {\n        return `${char}${num}`;\n      });\n    });\n    return board;\n  }\n\n  const board = createBoard();\n\n  const placeShip = (coords, ship) => {\n    occupiedCoords.push([ship, coords]);\n    return occupiedCoords;\n  }\n\n  const receiveAttack = (coord) => {\n    // pair[0] is the ship\n    // pair[1] is an array of the ship coords\n    for (let i = 0; i < occupiedCoords.length; i++) {\n      const pair = occupiedCoords[i];\n      if (pair[1].includes(coord)) {\n        const index = pair[1].findIndex((x) => x === coord);\n        pair[0].hit(index);\n        successfulAttacks.push(coord);\n        return pair;\n      }\n    }\n    missedAttacks.push(coord);\n  }\n\n  const allShipsSunk = () => {\n    let counter = 0;\n    occupiedCoords.forEach((pair) => {\n      if (pair[0].isSunk()) {\n        counter += 1;\n      }\n    });\n    if (counter === 10) {\n      return true;\n    }\n    return false;\n  }\n\n  return { \n    board, \n    placeShip, \n    receiveAttack, \n    occupiedCoords, \n    missedAttacks,\n    successfulAttacks,\n    allShipsSunk \n  };\n}\n\nexport default GameBoardFactory;","function ShipFactory(length) {\n\n  const hull = Array.from({ length: length }).map(() => \"\");\n\n  const hit = (index) => {\n    hull[index] = \"X\";\n  }\n\n  const isSunk = () => {\n    return hull.every((compartment) => compartment === \"X\");\n  }\n\n  return { hull, hit, isSunk };\n}\n\nexport default ShipFactory;","var lodash = require('lodash');\n\nfunction PlayerFactory() {\n  let attacks = [];\n  let nextAttacks = [];\n\n  const humanAttack = (coord) => {\n    if (attacks.includes(coord)) {\n      throw new Error('You cannot attack the same cell twice!');\n    } else {\n      attacks.push(coord);\n      return attacks;\n    }\n  }\n\n  const computerAttack = () => {\n    if (nextAttacks.length > 0) {\n      attacks.push(nextAttacks[nextAttacks.length - 1]);\n      const newAttack = nextAttacks.splice(nextAttacks.length - 1, 1);\n      return newAttack;\n    } else {\n      const height = lodash.range(1, 11);\n      const length = lodash.range(65, 75).map((code) => String.fromCharCode(code));\n      const mockBoard = height.map((num) => {\n        return length.map((char) => {\n          return `${char}${num}`;\n        });\n      });\n      while (true) {\n        const x = Math.floor(Math.random() * 10);\n        const y = Math.floor(Math.random() * 10);\n        const attackCoord = mockBoard[x][y];\n        if (attacks.includes(attackCoord)) {\n          continue;\n        } else {\n          attacks.push(attackCoord);\n          return attacks;\n        }\n      }\n    }\n  }\n\n  const locatedCoordIndexes = (coord, board) => {\n    for (let i = 0; i < board.length; i++) {\n      const row = board[i];\n      if (row.includes(coord)) {\n        const nestedIndex = row.findIndex((pos) => pos === coord);\n        return [i, nestedIndex];\n      }\n    }\n  }\n\n  const getCoords = (xandYindexes, board) => {\n    let coordsArray = [];\n    const x = xandYindexes[0];\n    const y = xandYindexes[1];\n    try {\n      const allRows = [board[x - 1], board[x], board[x + 1]];\n      const rows = allRows.filter((row) => row !== undefined);\n      rows.forEach((row) => {\n        coordsArray.push(row[y - 1]);\n        coordsArray.push(row[y]);\n        coordsArray.push(row[y + 1]);\n      })\n    } catch (err) {\n      console.log(err.message);\n      console.log(coordsArray);\n    }\n    return coordsArray;\n  }\n\n  const cleanCoords = (coords, originalCoord) => {\n    return coords.filter(\n      (coord) => coord !== undefined \n        && coord !== originalCoord\n        && !attacks.includes(coord)\n    );\n  }\n\n  const calculateNextAttackRange = (position, board) => {\n    const xAndYIndexes = locatedCoordIndexes(position, board);\n    const coords = getCoords(xAndYIndexes, board);\n    const finalCoords = cleanCoords(coords, position);\n    finalCoords.forEach((coord) => {\n      if (!nextAttacks.includes(coord)) {\n        nextAttacks.push(coord)\n      }\n    });\n    nextAttacks = lodash.difference(nextAttacks, attacks);\n    return nextAttacks;\n  }\n\n  return { humanAttack, computerAttack, attacks, calculateNextAttackRange }\n}\n\nexport default PlayerFactory;","import React, { useState, useEffect } from 'react';\nimport Boards from './components/Boards';\nimport GameBoardFactory from './factories/GameBoardFactory';\nimport ShipFactory from './factories/ShipFactory';\nimport PlayerFactory from './factories/PlayerFactory';\n\n\nfunction App() {\n\n  const [ playerBoard, setPlayerBoard ] = useState(GameBoardFactory());\n  const [ computerBoard, setComputerBoard ] = useState(GameBoardFactory());\n\n  const [ player, setPlayer ] = useState(PlayerFactory());\n  const [ computer, setComputer ] = useState(PlayerFactory());\n\n  const [ userTurn, setUserTurn ] = useState(true);\n  let [ roundCounter, setRoundCounter ] = useState(0);\n\n  const playerCoords = [\n    ['A1', 'A2', 'A3', 'A4'],\n    ['I7', 'I8', 'I9'],\n    ['B8', 'C8', 'D8'],\n    ['C5', 'D5'],\n    ['J1', 'J2'],\n    ['A10', 'B10'],\n    ['H7'],\n    ['G3'],\n    ['E2'],\n    ['F7'],\n  ]\n\n  const computerCoords = [\n    ['J7', 'J8', 'J9', 'J10'],\n    ['I8', 'I9', 'I10'],\n    ['H8', 'H9', 'H10'],\n    ['G9', 'G10'],\n    ['F9', 'F10'],\n    ['E9', 'E10'],\n    ['D10'],\n    ['C10'],\n    ['B10'],\n    ['A10'],\n  ]\n\n  const initializeBoards = (identifier, coords) => {\n    if (identifier === 'Player') {\n      coords.forEach((coord) => {\n        playerBoard.placeShip(coord, ShipFactory(coord.length))\n        setPlayerBoard(playerBoard)\n      })\n    } else {\n      coords.forEach((coord) => {\n        computerBoard.placeShip(coord, ShipFactory(coord.length))\n        setComputerBoard(computerBoard)\n      })\n    }\n  }\n\n  const computerTurn = () => {\n    if (playerBoard.allShipsSunk()) {\n      alert('Game over! The Computers won!');\n      setUpNewGame();\n      return;\n    }\n    if (userTurn === false) {\n      const newComputer = Object.assign({}, computer);\n      const newPlayerBoard = Object.assign({}, playerBoard);\n      const computerAttacks = newComputer.computerAttack();\n      const currentAttack = computerAttacks[computerAttacks.length - 1];\n      if (newPlayerBoard.receiveAttack(currentAttack) !== undefined) {\n        computer.calculateNextAttackRange(currentAttack, newPlayerBoard.board);\n      }\n      setPlayerBoard(newPlayerBoard);\n      setComputer(newComputer);\n      setUserTurn(true);\n      setRoundCounter(roundCounter += 1);\n    }\n  }\n\n  useEffect(() => {\n    if (roundCounter === 0) {\n      initializeBoards('Player', playerCoords);\n      initializeBoards('Computer', computerCoords);\n    }\n  })\n\n  useEffect(() => {\n    if (computerBoard.allShipsSunk()) {\n      alert('Game over! Humans won!');\n      setUpNewGame();\n      return;\n    }\n    setTimeout(() => computerTurn(), 0);\n  }, [userTurn])\n\n  const setUpNewGame = () => {\n    setUserTurn(true);\n    setPlayer(PlayerFactory());\n    setComputer(PlayerFactory());\n    setPlayerBoard(GameBoardFactory());\n    setComputerBoard(GameBoardFactory());\n    setRoundCounter(0);\n  }\n\n  const handlePlayerTurn = (coord) => {\n    if (userTurn) {\n      const newPlayer = Object.assign({}, player);\n      const newComputerBoard = Object.assign({}, computerBoard);\n      try {\n        newComputerBoard.receiveAttack(coord);\n        newPlayer.humanAttack(coord);\n        setUserTurn(false);\n        setPlayer(newPlayer);\n        setComputerBoard(newComputerBoard);\n        setRoundCounter(roundCounter += 1);\n      } catch (e) {\n        alert(e.message)\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Header\">\n        <h1>Battleship</h1>\n      </div>\n      {userTurn ? \n          <div className=\"Turn\">\n            Your Turn!\n          </div>\n        : <div className=\"Turn\">\n            Computer's Turn!\n          </div>\n      }\n      <Boards \n        playerBoard={playerBoard}\n        computerBoard={computerBoard}\n        handlePlayerTurn={handlePlayerTurn}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}